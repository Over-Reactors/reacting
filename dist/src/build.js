(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/jessethach/cf-adv/reactful/src/js/bear_app.js":[function(require,module,exports){
//show Bear
var Bear = React.createClass({displayName: "Bear",
  render: function() {
    return (
      React.createElement("div", {className: "bear"},
        React.createElement("h2", {className: "bearName"},
          "Name: ", this.props.name
        ),
        React.createElement("p", null,
          "Fish Preference: ", this.props.fishPreferences
        )
      )
    );
  }
});


//update bear
var UpdateBear = React.createClass({displayName: "UpdateBear",
  getInitialState: function() {
    return {name: this.props.name, fishPreference: this.props.fishPreferences, _id: this.props.key};
  },
  handleNameChange: function(e) {
    this.setState({name: e.target.value});
  },
  handleFishPreferenceChange: function(e) {
    this.setState({fishPreference: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var name = this.state.name.trim();
    var fishPreference = this.state.fishPreference.trim();
    var bear = {name: name, fishPreference: fishPreference};
    if (!fishPreference || !name) {
      return;
    }
    $.ajax({
      url: "http://localhost:3000/api/bears/" + this.props._id,
      dataType: 'json',
      type: 'PUT',
      data: bear,
      success: function(data) {
        console.log('updated');
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
    this.setState({name: '', fishPreference: ''});
  },
  render: function() {
    return (

      React.createElement("form", {className: "bearUpdate", onSubmit: this.handleSubmit},
        React.createElement("input", {
          type: "text",
          placeholder: "Bear Name",
          value: this.state.name,
          onChange: this.handleNameChange}
        ),
        React.createElement("input", {
          type: "text",
          placeholder: "Fish Preference",
          value: this.state.fishPreference,
          onChange: this.handleFishPreferenceChange}
        ),
        React.createElement("input", {
          type: "submit",
          value: "Update"}
        )
      )
      )
  }
});

var BearDelete = React.createClass({displayName: "BearDelete",
  getInitialState: function() {
    return {_id: this.props._id};
  },
  killBear: function(){
    var id = this.state._id;
    $.ajax({
        url: 'http://localhost:3000/api/bears/' + id,
        type: 'DELETE',
        cache: false,
        success: function(data) {
          console.log('gone!');
        }.bind(this),
        error: function(xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });
  },
  render: function(){
    var id = this.state._id;
    return (
          React.createElement("button", {onClick: this.killBear}, "x")
    );
  }
});

//bear list
var BearList = React.createClass({displayName: "BearList",

  render: function() {
    var bearNodes = this.props.data.map(function(bear) {
      return (
        React.createElement("div", {key: bear._id},
          React.createElement(Bear, {name: bear.name, fishPreferences: bear.fishPreference}),
          React.createElement(BearDelete, {_id: bear._id}),
          React.createElement(UpdateBear, {_id: bear._id, name: bear.name, fishPreference: bear.fishPreference})
        )
      );
    });
    return (
      React.createElement("div", {className: "bearList"},
        bearNodes
      )
    );
  }
});

//new bear
var BearForm = React.createClass({displayName: "BearForm",
  getInitialState: function() {
    return {name: '', fishPreference: ''};
  },
  handleNameChange: function(e) {
    this.setState({name: e.target.value});
  },
  handleFishPreferenceChange: function(e) {
    this.setState({fishPreference: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var name = this.state.name.trim();
    var fishPreference = this.state.fishPreference.trim();
    if (!fishPreference || !name) {
      return;
    }
    this.props.onBearSubmit({name: name, fishPreference: fishPreference});
    this.setState({name: '', fishPreference: ''});
  },
  render: function() {
    return (
      React.createElement("form", {className: "bearForm", onSubmit: this.handleSubmit},
        React.createElement("h2", null, "New Bear"),
        React.createElement("input", {
          type: "text",
          placeholder: "Bear Name",
          value: this.state.name,
          onChange: this.handleNameChange}
        ),
        React.createElement("input", {
          type: "text",
          placeholder: "fish preference",
          value: this.state.fishPreference,
          onChange: this.handleFishPreferenceChange}
        ),
        React.createElement("input", {type: "submit", value: "Post"})
      )
    );
  }
});

// get the bears and store them in data
var BearBox = React.createClass({displayName: "BearBox",
  loadBearsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleBearSubmit: function(bear) {
    console.log(bear);
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: bear,
      success: function(data) {
        console.log('hooray');
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadBearsFromServer();
    setInterval(this.loadBearsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      React.createElement("div", {className: "bearBox"},
        React.createElement("h1", null, "BEARS"),
        React.createElement(BearList, {data: this.state.data}),
        React.createElement(BearForm, {onBearSubmit: this.handleBearSubmit})
      )
    );
  }
});

ReactDOM.render(
  React.createElement(BearBox, {url: "http://localhost:3000/api/bears", pollInterval: 1000}),
  document.getElementById('content')
);

},{}]},{},["/Users/jessethach/cf-adv/reactful/src/js/bear_app.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
